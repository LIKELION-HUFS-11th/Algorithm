<다익스트라 알고리즘>

- 그리디 알고리즘의 한 종류

- 어느 한 출발점에서 다른 도착점까지의 최단 경로 탐색

- 주어진 출발점에서 시작

- 출발점으로부터 최단 거리가 확정되지 않은 점들 중에서
출발점으로부터 가장 가까운 점을 추가하고 그 점의 최단 거리를 확정

- O(n**2)



## 기본 코드 구조
import heapq

def dijkstra(graph, start):
    # 시작 노드로부터의 최단 거리를 저장하는 딕셔너리
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # 우선순위 큐를 사용하여 탐색할 노드와 거리를 저장
    priority_queue = [(0, start)]

    while priority_queue:
        # 현재 노드와 현재까지의 최단 거리를 가져옴
        current_distance, current_node = heapq.heappop(priority_queue)

        # 현재까지의 거리가 이미 더 작은 경우 스킵
        if current_distance > distances[current_node]:
            continue

        # 현재 노드의 인접 노드를 순회
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            # 더 짧은 거리를 발견한 경우 업데이트하고 우선순위 큐에 추가
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

# 그래프를 인접 리스트로 표현
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

start_node = 'A'
result = dijkstra(graph, start_node)
print(result)





# heapq.heappop(priority_queue): priority_queue에서 가장 작은 원소를 pop하고 리턴